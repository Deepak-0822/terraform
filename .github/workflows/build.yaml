name: CI Java Build and Push to AWS ECR

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'GitHub repository to checkout (owner/repo format)'
        required: true
        type: string
      ecr_repo_name:
        description: 'Docker image name to push (e.g., my-app)'
        required: true
        type: string
      docker_tag:
        description: 'Docker tag for the image (e.g., latest)'
        required: true
        type: string
permissions:
  id-token: write
  contents: write


jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-south-1
      ECR_REPO_NAME: ${{ github.event.inputs.ecr_repo_name }}
      IMAGE_TAG: ${{ github.event.inputs.docker_tag }}

    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build Java Application
        run: |
          echo "Building Java application..."
          mvn clean package -DskipTests

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app-artifact
          path: target/*.jar

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REPO_NAME:$IMAGE_TAG .

      - name: Tag Docker Image for ECR
        run: |
          echo "Tagging Docker image for ECR..."
          ECR_REGISTRY=$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.${AWS_REGION}.amazonaws.com
          docker tag $ECR_REPO_NAME:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG
          echo "ECR_IMAGE=$ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Push Docker Image to ECR
        run: |
          echo "Pushing Docker image to ECR..."
          docker push $ECR_IMAGE
