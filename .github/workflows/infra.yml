name: Terraform Infra Setup 

on:
  push:
  workflow_dispatch:

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # - name: Save EC2 Private Key
      #   run: |
      #     echo "${{ secrets.EC2_PRIVATE_KEY }}"> private_key.pem
      #     pwd
      #     ls
      #     chmod 600 private_key.pem

      # - name: Install Checkov
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install checkov

      # - name: Run Checkov Static Analysis
      #   run: |
      #     checkov -d . --skip-path .github/* --skip-path k8s/*   --soft-fail

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ap-south-1

      - name: Terraform Init
        run:  terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan        
        run: |  
         terraform plan

      # - name: Terraform Apply
      #   env:
      #     TF_VAR_private_key_name: ${{ secrets.EC2_PRIVATE_KEY }}
      #   working-directory: /home/runner/work/terraform/terraform
      #   run: |
      #    terraform apply -auto-approve

      # - name: Upload Terraform logs
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: terraform-logs
      #     path: ./log.txt

      # - name: Terraform destroy
      #   run: terraform destroy --auto-approve









# module "vpc" {
#   source = "./modules/vpc"

#   name = "${var.environment}-${var.project_name}-vpc"
#   cidr = var.vpc_cidr
#   azs             = var.subnet_azs
#   private_subnets = var.private_subnets
#   public_subnets  = var.public_subnets

#   enable_dns_hostnames       = true
#   enable_nat_gateway         = true
#   single_nat_gateway         = var.single_nat_gateway
#   one_nat_gateway_per_az     = var.one_nat_gateway_per_az #false
#   enable_vpn_gateway         = false
#   reuse_nat_ips              = true 
#   external_nat_ip_ids        = [aws_eip.nat.allocation_id] # <= Directly referencing the allocation_id
#   manage_default_network_acl = false

#   public_route_table_tags = {
#     Name = "${var.environment}-${var.project_name}-pub-igw-rt"
#   }
#   private_route_table_tags = {
#     Name = "${var.environment}-${var.project_name}-pvt-nat-rt"
#   }

#   igw_tags = {
#     Name = "${var.environment}-${var.project_name}-igw"
#   }
#   nat_gateway_tags = {
#     Name = "${var.environment}-${var.project_name}-nat"
#   }
#   tags = {
#     Terraform = "true"
#     Environment = "${var.environment}-${var.project_name}"
#   }
# }

# resource "aws_eip" "nat" {
#   domain     = "vpc"
#   tags       = {
#   Name       = "${var.environment}-${var.project_name}-nat-eip"
#   }
# }

# #### Ec2
# module "ec2_instance" {
#   source = "./modules/ec2"

#   name = "${var.environment}-${var.project_name}-ec2"
#   ami  = "ami-0e35ddab05955cf57"
#   associate_public_ip_address = true
#   instance_type          = var.instance_type
#   key_name               = "ec2-pem-key-mum"
#   user_data = file("${path.module}/user_data.sh")
#   vpc_security_group_ids = [module.security_group.security_group_id] # Use the output name
#   subnet_id              = module.vpc.public_subnets[0]  # Access the first (or desired) public subnet ID from the list

#   tags = {
#     Terraform   = "true"
#     Environment = "${var.environment}-${var.project_name}"
#   }
# }

# module "security_group" {
#   source = "./modules/security_group"

#   name        = "${var.environment}-${var.project_name}-ec2-sg"
#   vpc_id      = module.vpc.vpc_id

#   ingress_rules            = ["all-tcp"]
#   ingress_cidr_blocks      = ["0.0.0.0/0"]
#   egress_rules             = ["all-tcp"]
#   egress_cidr_blocks      = ["0.0.0.0/0"]

# }